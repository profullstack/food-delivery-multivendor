#!/bin/bash

# CigarUnderground Test Script
# Usage: ./bin/test [--quick|--full|--dev] [--no-pull] [--timeout=N]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

# Default configuration
TIMEOUT=300  # 5 minutes default timeout
PULL_CODE=true
TEST_MODE="full"
HEALTH_CHECK_INTERVAL=5
MAX_HEALTH_CHECKS=60  # 5 minutes max wait for health

# Service endpoints
declare -A SERVICES=(
    ["web"]="http://localhost:10700"
    ["admin"]="http://localhost:10701"
    ["api"]="http://localhost:10702"
)

declare -A HEALTH_ENDPOINTS=(
    ["web"]="http://localhost:10700/"
    ["admin"]="http://localhost:10701/api/health"
    ["api"]="http://localhost:10702/health"
)

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --quick)
                TEST_MODE="quick"
                shift
                ;;
            --full)
                TEST_MODE="full"
                shift
                ;;
            --dev)
                TEST_MODE="dev"
                shift
                ;;
            --no-pull)
                PULL_CODE=false
                shift
                ;;
            --timeout=*)
                TIMEOUT="${1#*=}"
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Function to show help
show_help() {
    echo "CigarUnderground Test Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  --quick       Quick test (skip cleanup, faster startup)"
    echo "  --full        Full test with cleanup (default)"
    echo "  --dev         Test development services instead of Docker"
    echo "  --no-pull     Skip git pull"
    echo "  --timeout=N   Set timeout in seconds (default: 300)"
    echo "  --help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Full test with cleanup"
    echo "  $0 --quick           # Quick test without cleanup"
    echo "  $0 --dev             # Test development services"
    echo "  $0 --no-pull --quick # Quick test without git pull"
}

# Function to check service health
check_service_health() {
    local service=$1
    local url=${HEALTH_ENDPOINTS[$service]}
    local max_attempts=$2
    local attempt=1
    
    print_status "Checking $service health at $url..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s --max-time 10 "$url" >/dev/null 2>&1; then
            print_success "$service is healthy (attempt $attempt/$max_attempts)"
            return 0
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            print_error "$service health check failed after $max_attempts attempts"
            return 1
        fi
        
        print_status "$service not ready yet (attempt $attempt/$max_attempts), waiting ${HEALTH_CHECK_INTERVAL}s..."
        sleep $HEALTH_CHECK_INTERVAL
        ((attempt++))
    done
}

# Function to test service endpoints
test_service_endpoints() {
    local failed_services=()
    
    print_status "Testing service endpoints..."
    
    for service in "${!SERVICES[@]}"; do
        local url=${SERVICES[$service]}
        print_status "Testing $service at $url..."
        
        if curl -I -f -s --max-time 10 "$url" >/dev/null 2>&1; then
            print_success "$service endpoint is responding"
        else
            print_error "$service endpoint is not responding"
            failed_services+=("$service")
        fi
    done
    
    if [ ${#failed_services[@]} -eq 0 ]; then
        print_success "All service endpoints are responding!"
        return 0
    else
        print_error "Failed services: ${failed_services[*]}"
        return 1
    fi
}

# Function to wait for Docker services to be healthy
wait_for_docker_health() {
    print_status "Waiting for Docker services to be healthy..."
    
    local start_time=$(date +%s)
    local timeout_time=$((start_time + TIMEOUT))
    
    while [ $(date +%s) -lt $timeout_time ]; do
        local unhealthy_services=()
        local starting_services=()
        
        # Check each service health using docker compose ps
        while IFS= read -r line; do
            if [[ $line == *"(unhealthy)"* ]]; then
                local service_name=$(echo "$line" | awk '{print $1}')
                unhealthy_services+=("$service_name")
            elif [[ $line == *"(health: starting)"* ]]; then
                local service_name=$(echo "$line" | awk '{print $1}')
                starting_services+=("$service_name")
            fi
        done < <(docker compose ps --format "table {{.Name}}\t{{.Status}}" | tail -n +2)
        
        # If no unhealthy services and no starting services, we're good
        if [ ${#unhealthy_services[@]} -eq 0 ] && [ ${#starting_services[@]} -eq 0 ]; then
            print_success "All Docker services are healthy!"
            return 0
        fi
        
        # Show status of services still starting up
        if [ ${#starting_services[@]} -gt 0 ]; then
            print_status "Services still starting: ${starting_services[*]}"
        fi
        if [ ${#unhealthy_services[@]} -gt 0 ]; then
            print_warning "Unhealthy services: ${unhealthy_services[*]}"
        fi
        
        sleep $HEALTH_CHECK_INTERVAL
    done
    
    print_error "Timeout waiting for Docker services to be healthy"
    print_status "Current service status:"
    docker compose ps
    return 1
}

# Function to run full test
run_full_test() {
    print_status "Running full test with cleanup..."
    
    if [ "$PULL_CODE" = true ]; then
        print_status "Pulling latest code..."
        if ! git pull; then
            print_warning "Git pull failed, continuing with current code"
        fi
    fi
    
    print_status "Cleaning up previous Docker resources..."
    ./bin/startup --clean
    
    print_status "Starting all Docker services..."
    ./bin/startup --all
    
    # Wait for Docker health checks
    if ! wait_for_docker_health; then
        print_error "Docker services failed to become healthy"
        print_status "Showing service logs for debugging:"
        docker compose logs --tail=20
        return 1
    fi
    
    # Additional wait for services to fully initialize
    print_status "Waiting additional 15 seconds for services to fully initialize..."
    sleep 15
    
    # Test individual service health endpoints
    local health_failed=false
    for service in web admin; do
        if ! check_service_health "$service" 3; then
            health_failed=true
        fi
    done
    
    # Give API more time since it takes longer to start
    if ! check_service_health "api" 10; then
        health_failed=true
    fi
    
    if [ "$health_failed" = true ]; then
        print_error "Some services failed health checks"
        return 1
    fi
    
    # Test all endpoints
    if ! test_service_endpoints; then
        return 1
    fi
    
    print_success "Full test completed successfully!"
}

# Function to run quick test
run_quick_test() {
    print_status "Running quick test (no cleanup)..."
    
    if [ "$PULL_CODE" = true ]; then
        print_status "Pulling latest code..."
        if ! git pull; then
            print_warning "Git pull failed, continuing with current code"
        fi
    fi
    
    # Check if services are already running
    if docker compose ps | grep -q "Up"; then
        print_status "Services already running, testing endpoints..."
    else
        print_status "Starting Docker services..."
        ./bin/startup --all
        
        if ! wait_for_docker_health; then
            print_error "Docker services failed to become healthy"
            return 1
        fi
        
        sleep 10
    fi
    
    # Test endpoints
    if ! test_service_endpoints; then
        return 1
    fi
    
    print_success "Quick test completed successfully!"
}

# Function to run development test
run_dev_test() {
    print_status "Running development services test..."
    
    if [ "$PULL_CODE" = true ]; then
        print_status "Pulling latest code..."
        if ! git pull; then
            print_warning "Git pull failed, continuing with current code"
        fi
    fi
    
    # Stop any existing dev services
    ./bin/startup --stop-dev 2>/dev/null || true
    
    print_status "Starting development services..."
    ./bin/startup --dev
    
    # Wait for dev services to start
    print_status "Waiting for development services to start..."
    sleep 20
    
    # Test dev endpoints (different ports for dev mode)
    declare -A DEV_SERVICES=(
        ["admin"]="http://localhost:10701"
        ["api"]="http://localhost:10702"
    )
    
    local failed_services=()
    for service in "${!DEV_SERVICES[@]}"; do
        local url=${DEV_SERVICES[$service]}
        print_status "Testing dev $service at $url..."
        
        if curl -I -f -s --max-time 10 "$url" >/dev/null 2>&1; then
            print_success "Dev $service endpoint is responding"
        else
            print_error "Dev $service endpoint is not responding"
            failed_services+=("$service")
        fi
    done
    
    if [ ${#failed_services[@]} -eq 0 ]; then
        print_success "Development test completed successfully!"
        return 0
    else
        print_error "Failed dev services: ${failed_services[*]}"
        return 1
    fi
}

# Function to show final status
show_final_status() {
    echo ""
    print_status "=== Test Summary ==="
    print_status "Service Status:"
    docker compose ps 2>/dev/null || echo "  Docker services not running"
    
    echo ""
    print_status "Available URLs:"
    echo "  - Main Site: http://localhost:10700"
    echo "  - Admin Panel: http://localhost:10701"
    echo "  - Backend API: http://localhost:10702"
    echo "  - GraphQL Playground: http://localhost:10702/graphql"
    echo ""
    print_status "Production URLs (if configured):"
    echo "  - Main Site: https://cigarunderground.org"
    echo "  - Admin Panel: https://admin.cigarunderground.org"
    echo "  - Backend API: https://api.cigarunderground.org"
}

# Function to diagnose current setup issues
diagnose_setup() {
    print_status "=== SETUP DIAGNOSIS ==="
    
    # Check if web app exists but isn't containerized
    if [ -d "enatega-multivendor-web" ]; then
        print_warning "Found enatega-multivendor-web directory but no Dockerfile!"
        print_status "The actual food delivery web app exists but isn't being served"
        print_status "Currently serving placeholder from nginx/html/index.html"
        
        # Check if it has package.json
        if [ -f "enatega-multivendor-web/package.json" ]; then
            print_status "Web app appears to be a Next.js application"
        fi
    fi
    
    # Check docker-compose for web service
    if grep -q "cigarunderground-web:" docker-compose.yml; then
        print_status "Found cigarunderground-web service in docker-compose.yml"
        if grep -A 5 "cigarunderground-web:" docker-compose.yml | grep -q "build:"; then
            print_success "Web service has build configuration"
        else
            print_warning "Web service uses nginx image, not building actual web app"
        fi
    else
        print_error "No cigarunderground-web service found in docker-compose.yml"
    fi
    
    # Check backend health
    print_status "Checking backend container health..."
    if docker compose ps 2>/dev/null | grep -q "cigarunderground-backend.*healthy"; then
        print_success "Backend container is healthy"
    elif docker compose ps 2>/dev/null | grep -q "cigarunderground-backend.*unhealthy"; then
        print_error "Backend container is unhealthy"
        print_status "Backend logs:"
        docker compose logs --tail=10 cigarunderground-backend 2>/dev/null || echo "  No logs available"
    elif docker compose ps 2>/dev/null | grep -q "cigarunderground-backend"; then
        print_warning "Backend container exists but health status unknown"
    else
        print_warning "Backend container not found or not running"
    fi
    
    # Check what's actually running
    print_status "Current container status:"
    docker compose ps 2>/dev/null || echo "  No containers running"
    
    echo ""
    print_status "=== RECOMMENDATIONS ==="
    echo "1. Create Dockerfile for enatega-multivendor-web to build the Next.js app"
    echo "2. Update docker-compose.yml to build and serve the actual web app instead of static nginx"
    echo "3. Fix backend health issues if any exist"
    echo "4. The current setup serves a placeholder landing page instead of the food delivery app"
    echo "5. API issues may be due to backend container health problems"
}

# Main execution
main() {
    print_status "CigarUnderground Test Script Starting..."
    print_status "Mode: $TEST_MODE, Timeout: ${TIMEOUT}s, Pull: $PULL_CODE"
    
    # Check prerequisites
    if ! command_exists curl; then
        print_error "curl is required but not installed"
        exit 1
    fi
    
    if ! command_exists docker; then
        print_error "docker is required but not installed"
        exit 1
    fi
    
    # Run appropriate test based on mode
    case $TEST_MODE in
        "full")
            if run_full_test; then
                show_final_status
                exit 0
            else
                show_final_status
                exit 1
            fi
            ;;
        "quick")
            if run_quick_test; then
                show_final_status
                exit 0
            else
                show_final_status
                exit 1
            fi
            ;;
        "dev")
            if run_dev_test; then
                show_final_status
                exit 0
            else
                show_final_status
                exit 1
            fi
            ;;
        *)
            print_error "Unknown test mode: $TEST_MODE"
            exit 1
            ;;
    esac
}

# Parse arguments and run main function
parse_args "$@"

# Always run diagnosis first
diagnose_setup

main
